import { Component, VNodeProps, AllowedComponentProps } from 'vue-demi';
import type { ComputedRef, DefineComponent } from 'vue-demi';
import { EventHookOn, UseConfirmDialogRevealResult } from '@vueuse/core';
export declare type ComponentProps<C extends Component> = C extends new (...args: any) => any ? Omit<InstanceType<C>['$props'], keyof VNodeProps | keyof AllowedComponentProps> : never;
declare type PropsBehaviorOptions = {
    chore: boolean;
    keepInitial: boolean;
};
/**
 * Function that makes simple to create, reuse,
 * promisify and build chains of modal dialogs.
 *
 * @param dialog - a component that used for modal dialog
 * @param initialAttrs - new props data for dialog component, optional
 * @param options - props behavior settings, optional
 * @returns `{ reveal, isRevealed, onConfirm, onCancel, close, closeAll }` -
 * `reveal` - shows the component
 * `isRevealed` - return computed mark if the component is shown
 * `onConfirm` - hook that gets a callback for user's confirmation
 * `onCancel` - hook that gets a callback for user's canceling
 * `close` - close the dialog without triggering any hook and don't change `isRevealed`
 * `closeAll` - close all open dialogs
 */
export declare function createConfirmDialog<C extends DefineComponent<any, any, any, any, any, any, any, any>>(dialog: C, initialAttrs?: ComponentProps<C>, options?: PropsBehaviorOptions): {
    close: () => void;
    closeAll: () => void;
    reveal: (props?: ComponentProps<C>) => Promise<UseConfirmDialogRevealResult<any, boolean>>;
    isRevealed: ComputedRef<boolean>;
    onConfirm: EventHookOn;
    onCancel: EventHookOn;
};
export {};
